/*
 * opensha-oaf dependencies
 */

apply plugin: 'java-library'

ext {
    parentProject = 'opensha'
}

apply from: '../opensha/build-common.gradle'

dependencies {

    /* for OAF */
    api 'org.mongodb:mongodb-driver-sync:4.11.0'
 
    /* no remote repo */
    implementation files('lib/ProductClient.jar')
    api files('lib/wContour-1.6.1.jar')

    implementation project(path: ':opensha')

    testImplementation 'junit:junit:4.12'
}




// Create a task for an OAF application
void createOafAppTask(String taskName, String prefix, String mainClass) {
    task (taskName, type: Jar, dependsOn: ':'+project.parentProject+':fatJar') {
        archiveBaseName = prefix
        from { configurations.apiResolvable.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude { it.path.contains('META-INF') }
            }
        }}
        // include compiled source from this project
        from sourceSets.main.allJava
        // include upstream project fat jar
        from zipTree(file('../'+project.parentProject+'/build/libs/'+project.parentProject+'-all.jar')).matching {
            exclude { it.path.contains('META-INF') }
        }
        // include PDL jar
        from zipTree(file('lib/ProductClient.jar')).matching {
            exclude { it.path.contains('META-INF') }
        }
        // establish the startup class
        manifest {
            attributes(
                'Main-Class': mainClass
            )
        }
        duplicatesStrategy = 'exclude'
        with jar
    }
}

// make that method visible
ext {
    createOafAppTask = this.&createOafAppTask
}




// Create a task for an OAF server
void createOafServerTask(String taskName, String prefix) {
    task (taskName, type: Jar, dependsOn: ':'+project.parentProject+':fatJar') {
        archiveBaseName = prefix
        from { configurations.apiResolvable.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude { it.path.contains('META-INF') }
            }
        }}
        // include compiled source from this project
        from sourceSets.main.allJava
        // include upstream project fat jar
        from zipTree(file('../'+project.parentProject+'/build/libs/'+project.parentProject+'-all.jar')).matching {
            exclude { it.path.contains('META-INF') }
            exclude 'build.version'
        }
        with jar
    }
}

// make that method visible
ext {
    createOafServerTask = this.&createOafServerTask
}




// OAF application tasks

createOafAppTask("appOAFJar", "AftershockGUI-current", "org.opensha.oaf.rj.gui.RJGUITop")
createOafAppTask("appOAF_ETAS_Jar", 'AftershockGUI_ETAS-current-'+getDate(), "org.opensha.oaf.etas.AftershockStatsGUI_ETAS")
createOafAppTask("appETAS_GUIJar", "AftershockETAS_GUI", "org.opensha.oaf.oetas.gui.OEGUITop")
createOafAppTask("appETAS_TestJar", "AftershockETAS_Test", "org.opensha.oaf.oetas.env.OEtasTest")

// OAF server task

createOafServerTask("oafJar", project.name + '-oaf')
